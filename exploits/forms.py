from django import forms
from .models import Vulnerability, VulnerabilityComment, ExportRequest
from django_summernote.widgets import SummernoteWidget

class VulnerabilityReportForm(forms.ModelForm):
    description = forms.CharField(widget=SummernoteWidget())
    impact_and_risks = forms.CharField(widget=SummernoteWidget())
    reproduction_steps = forms.CharField(widget=SummernoteWidget())

    class Meta:
        model = Vulnerability
        fields = ['title', 'description', 'impact_and_risks', 'reproduction_steps', 'affected_components', 'severity',
                  'is_anonymous', 'reporter_contact', 'status', 'reported_by']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter a title for the vulnerability'}),
            'affected_components': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'e.g., IoT Device v1.2, Firmware 3.0'}),
            'severity': forms.Select(attrs={'class': 'form-control'}),
            'status': forms.Select(attrs={'class': 'form-control'}),
            'is_anonymous': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
            'reporter_contact': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Email or phone number'}),
            'reported_by': forms.HiddenInput(),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        if user and user.is_authenticated:
            self.fields['reported_by'].initial = user.id
        self.fields['status'].initial = 'pending'
        self.fields['status'].widget = forms.HiddenInput()

    def clean(self):
        cleaned_data = super().clean()
        is_anonymous = cleaned_data.get('is_anonymous')
        reporter_contact = cleaned_data.get('reporter_contact')

        if not is_anonymous and not reporter_contact:
            raise forms.ValidationError("Please provide contact information or choose to remain anonymous.")

        return cleaned_data

# Form for commenting on vulnerabilities
class VulnerabilityCommentForm(forms.ModelForm):
    class Meta:
        model = VulnerabilityComment
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={'rows': 3}),
        }


# Form for exporting vulnerabilities

class ExportRequestForm(forms.Form):
    start_date = forms.DateField(widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}))
    end_date = forms.DateField(widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}))
