from datetime import date
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.text import slugify
from django.utils import timezone
from ckeditor_uploader.fields import RichTextUploadingField
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist

User = get_user_model()


class Vulnerability(models.Model):
    SEVERITY_CHOICES = [
        ('low', 'Low'),
        ('medium', 'Medium'),
        ('high', 'High'),
        ('critical', 'Critical'),
    ]
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('verified', 'Verified'),
        ('in_progress', 'In Progress'),
        ('resolved', 'Resolved'),
        ('rejected', 'Rejected'),
    ]

    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True, max_length=255, blank=True)
    description = RichTextUploadingField()
    impact_and_risks = models.TextField(help_text="Describe the impact and potential risks of this vulnerability.")
    reproduction_steps = models.TextField(help_text="Provide steps to reproduce the vulnerability.")
    affected_components = models.CharField(max_length=200, help_text="Specify affected versions and devices.")
    severity = models.CharField(max_length=10, choices=SEVERITY_CHOICES, default='medium')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    reported_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                    related_name='reported_vulnerabilities')
    reported_at = models.DateTimeField(auto_now_add=True)
    is_anonymous = models.BooleanField(default=False)
    reporter_contact = models.CharField(max_length=200, blank=True, help_text="Provide your email or phone number.")
    resolved_at = models.DateTimeField(null=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        if self.status == 'resolved' and not self.resolved_at:
            self.resolved_at = timezone.now()
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title


class VulnerabilityAttachment(models.Model):
    vulnerability = models.ForeignKey(Vulnerability, on_delete=models.CASCADE, related_name='attachments')
    file = models.FileField(upload_to='vulnerabilities/attachments/')
    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Attachment for {self.vulnerability.title}"


class Review(models.Model):
    REVIEW_STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]
    vulnerability = models.ForeignKey(Vulnerability, on_delete=models.CASCADE, related_name='reviews')
    reviewer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='reviews')
    comments = models.TextField(default='')
    status = models.CharField(max_length=10, choices=REVIEW_STATUS_CHOICES, default='pending')
    reviewed_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Comment by {self.user.username if self.user else 'Anonymous'} on {self.vulnerability.title}"



class VulnerabilityComment(models.Model):
    vulnerability = models.ForeignKey(Vulnerability, on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Comment by {self.user.username if self.user else 'Anonymous'} on {self.vulnerability.title}"

# ---------- Export as html, formatting and exporting pdf and csv eating too much time ------------
class ExportRequest(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='export_requests')
    vulnerability = models.ForeignKey(Vulnerability, on_delete=models.CASCADE, related_name='export_requests')
    start_date = models.DateField(default=timezone.now)  # Using timezone for more dynamic default
    end_date = models.DateField(default=timezone.now)
    requested_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    is_completed = models.BooleanField(default=False)

    def __str__(self):
        return f"Export request by {self.user.username} from {self.start_date} to {self.end_date}"