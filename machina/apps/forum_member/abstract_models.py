"""

This code defines an abstract Django model named `AbstractForumProfile`,
which is intended for use in a forum application. It establishes a one-to-one
relationship between a user and their forum profile, allowing for the storage
of an avatar image, a signature (formatted text), and a count of the total posts
made by the user. The avatar field uses a custom upload path generated by the
`get_avatar_upload_to` method, which creates a unique filename for each uploaded
image using UUIDs. The signature field is subject to a maximum length constraint
defined in the application settings. The model is abstract, meaning it serves as a
base for other models but cannot be instantiated directly.
Additionally, it provides a string representation method to display the username
of the associated user.

"""
import os
import uuid

from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _

from machina.conf import settings as machina_settings
from machina.core import validators
from machina.models.fields import ExtendedImageField, MarkupTextField


def get_profile_avatar_upload_to(instance, filename):
    return instance.get_avatar_upload_to(filename)


class AbstractForumProfile(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='forum_profile',
        verbose_name=_('User'),
    )
    avatar = ExtendedImageField(
        null=True, blank=True, upload_to=get_profile_avatar_upload_to, verbose_name=_('Avatar'),
        **machina_settings.DEFAULT_AVATAR_SETTINGS
    )
    signature = MarkupTextField(
        verbose_name=_('Signature'), blank=True, null=True,
        validators=[
            validators.MarkupMaxLengthValidator(
                machina_settings.PROFILE_SIGNATURE_MAX_LENGTH
            ),
        ],
    )
    posts_count = models.PositiveIntegerField(verbose_name=_('Total posts'), blank=True, default=0)

    class Meta:
        abstract = True
        app_label = 'forum_member'
        verbose_name = _('Forum profile')
        verbose_name_plural = _('Forum profiles')

    def __str__(self):
        return self.user.get_username()

    def get_avatar_upload_to(self, filename):
        dummy, ext = os.path.splitext(filename)
        return os.path.join(
            machina_settings.PROFILE_AVATAR_UPLOAD_TO,
            '{id}{ext}'.format(id=str(uuid.uuid4()).replace('-', ''), ext=ext),
        )
